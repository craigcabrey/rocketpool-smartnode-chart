# Begin helpers, see next section for configurables

_serviceBase: &service-base
  enabled: false
  metricsPort: 10000
  podAnnotations:
    prometheus.io/path: /metrics
    prometheus.io/port: '10000'
    prometheus.io/scrape: 'true'
  podLabels:
    # FIXME: hack to make dashboard work
    job: rocketpool
  rbac:
    create: false
  serviceAccount:
    create: false

_consensusBase: &consensus-base
  <<: *service-base
  httpPort: 5052
  p2pPort: 9000
  rpcPort: 4000

_primaryConsensusBase: &primary-consensus-base
  <<: *consensus-base
  nameOverride: rocketpool-primary-beacon
  podLabels:
    # FIXME: hack to make dashboard work
    job: eth2

_primaryExecutionBase: &primary-execution-base
  <<: *service-base
  nameOverride: rocketpool-primary-execution
  podLabels:
    # FIXME: hack to make dashboard work
    job: eth1

_fallbackConsensusBase: &fallback-consensus-base
  <<: *consensus-base
  nameOverride: rocketpool-fallback-beacon
  podLabels:
    # FIXME: hack to make dashboard work
    job: fallback-eth2

_fallbackExecutionBase: &fallback-execution-base
  <<: *service-base
  nameOverride: rocketpool-fallback-execution
  podLabels:
    # FIXME: hack to make dashboard work
    job: fallback-eth1

_validatorBase: &validator-base
  <<: *service-base
  nameOverride: rocketpool-validator
  mode: validator

  initContainers:
    - name: wait-for-setup
      image: docker.io/library/busybox
      command:
        - sh
        - -c
        - while [ ! -f /data/data/validators/rp-fee-recipient-env.txt ]; do echo 'Waiting for fee recipient...'; sleep 5; done
      volumeMounts:
        - name: storage
          mountPath: /data

  podLabels:
    # FIXME: hack to make dashboard work
    job: validator

  persistence:
    enabled: true
    existingClaim: replace-me-before-install

  updateStrategy:
    type: Recreate

_besu: &besu-base
  defaultCommandTemplate: |
    - sh
    - -ac
    - >
      exec besu
      --data-path=/data
      --nat-method=KUBERNETES
      --rpc-http-enabled
      --rpc-http-host=0.0.0.0
      --rpc-http-port={{ .Values.httpPort }}
      --rpc-http-cors-origins=*
      --rpc-ws-enabled
      --rpc-ws-host=0.0.0.0
      --rpc-ws-port={{ .Values.wsPort }}
      --host-allowlist=*
      --engine-jwt-secret=/data/jwt.hex
      --engine-rpc-port={{ .Values.authPort }}
      --engine-host-allowlist=*
      --metrics-enabled
      --metrics-host=0.0.0.0
      --metrics-port={{ .Values.metricsPort }}
      --data-storage-format=bonsai
      --sync-mode=X_SNAP
      --Xsnapsync-synchronizer-flat-db-healing-enabled=true
      --fast-sync-min-peers=3
      --rpc-http-max-active-connections=1024
    {{- range .Values.extraArgs }}
      {{ tpl . $ }}
    {{- end }}

# User configurable section

global:
  checkpointSync:
    enabled: false
  main:
    network: ''
    # These depend on all clients using a consistent set of ports.
    engineEndpoint: http://{{ .Release.Name }}-rocketpool-{{- include "rocketpool.nodeType" . | trim -}}-execution:8551
    rpcEndpoint: http://{{ .Release.Name }}-rocketpool-{{- include "rocketpool.nodeType" . | trim -}}-execution:8545
    beaconEndpoint: http://{{ .Release.Name }}-rocketpool-{{- include "rocketpool.nodeType" . | trim -}}-beacon:5052
    mevBoostEndpoint: http://{{ .Release.Name }}-rocketpool-mev-boost:18550
  validator:
    grandine: false
    lighthouse: false
    lodestar: false
    nimbus: false
    prysm: false
    teku: false

rocketPool:
  addons-rescue-node:
    enabled: false
    username:
    password:
  bitflyNodeMetrics:
    bitflyEndpoint: https://beaconcha.in/api/v1/client/metrics
    bitflyMachineName: Smartnode
    bitflySecret: ''
  mevBoost:
    additionalFlags: ''
    aestusEnabled: false
    bloxRouteMaxProfitEnabled: false
    bloxRouteRegulatedEnabled: false
    edenEnabled: false
    enableRegulatedAllMev: false
    enableUnregulatedAllMev: false
    flashbotsEnabled: false
    selectionMode: profile
    ultrasoundEnabled: false
  root:
    enableBitflyNodeMetrics: false
    enableODaoMetrics: false
    executionClientMode: external
    exporterMetricsPort: 9103
    reconnectDelay: 60s
  smartnode:
    archiveECUrl: ''
    checkpointRetentionLimit: 200
    distributeThreshold: 1
    manualMaxFee: 0
    minipoolStakeGasThreshold: 150
    priorityFee: 2
    recordCheckpointInterval: 45
    rewardsTreeCustomUrl: ''
    rewardsTreeMode: download
    useRollingRecords: false
    watchtowerMaxFeeOverride: 200
    watchtowerPrioFeeOverride: 3
  extraConfig: {}

smartNode:
  <<: *service-base
  enabled: true

  image:
    repository: docker.io/rocketpool/smartnode
    tag: ''

  persistence:
    existingClaim: ''
    storageClass: ''

watchtower:
  <<: *service-base
  enabled: true

  image:
    repository: docker.io/rocketpool/smartnode
    tag: ''

mevBoost:
  <<: *service-base

  image:
    repository: docker.io/flashbots/mev-boost
    tag: 1.7

  relays: []
  port: 18550

# See documentation for options:
# https://github.com/ethpandaops/ethereum-helm-charts
primaryNode:
  enabled: true
  nameOverride: rocketpool-primary

  # Execution Layer clients
  besu:
    <<: *primary-execution-base
    <<: *besu-base
  erigon:
    <<: *primary-execution-base
  ethereumjs:
    <<: *primary-execution-base
  geth:
    <<: *primary-execution-base
  nethermind:
    <<: *primary-execution-base
  reth:
    <<: *primary-execution-base

  # Consensus Layer clients
  grandine:
    <<: *primary-consensus-base
  lighthouse:
    <<: *primary-consensus-base
  lodestar:
    <<: *primary-consensus-base
  nimbus:
    <<: *primary-consensus-base
  prysm:
    <<: *primary-consensus-base
  teku:
    <<: *primary-consensus-base

fallbackNode:
  enabled: false

  # Execution Layer clients
  besu:
    <<: *fallback-execution-base
    <<: *besu-base
  erigon:
    <<: *fallback-execution-base
  ethereumjs:
    <<: *fallback-execution-base
  geth:
    <<: *fallback-execution-base
  nethermind:
    <<: *fallback-execution-base
  reth:
    <<: *fallback-execution-base

  # Consensus Layer clients
  grandine:
    <<: *fallback-consensus-base
  lighthouse:
    <<: *fallback-consensus-base
  lodestar:
    <<: *fallback-consensus-base
  nimbus:
    <<: *fallback-consensus-base
  prysm:
    <<: *fallback-consensus-base
  teku:
    <<: *fallback-consensus-base

# Validators

grandine:
  <<: *validator-base

lighthouse:
  <<: *validator-base
  defaultValidatorCommandTemplate: |
    - sh
    - -ac
    - >
      exec lighthouse
      --network {{ .Values.global.main.network }}
      --datadir /data/data/validators/lighthouse
      validator
      --init-slashing-protection
      --logfile-max-number 0
      --beacon-nodes http://{{ .Release.Name }}-rocketpool-primary-beacon:5052
      --suggested-fee-recipient $(cut -d'=' -f2 /data/data/validators/rp-fee-recipient-env.txt)
      --enable-doppelganger-protection
      --metrics
      --metrics-address ::
      --metrics-port {{ .Values.metricsPort }}
      --builder-proposals
      --prefer-builder-proposals
    {{- range .Values.extraArgs }}
      {{ tpl . $ }}
    {{- end }}

lodestar:
  <<: *validator-base

nimbus:
  <<: *validator-base

prysm:
  <<: *validator-base

teku:
  <<: *validator-base

networkPolicy:
  create: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''
